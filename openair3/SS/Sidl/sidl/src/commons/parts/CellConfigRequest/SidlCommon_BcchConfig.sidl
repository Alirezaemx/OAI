/* vim: set ft=cpp:
 *****************************************************************
 *
 * Module : SIDL commons.
 *
 * Purpose: Provide common SIDL types and definitions.
 *
 *****************************************************************
 *
 *  Copyright (c) 2009-2021 SEQUANS Communications.
 *  All rights reserved.
 *
 *  This is confidential and proprietary source code of SEQUANS
 *  Communications. The use of the present source code and all
 *  its derived forms is exclusively governed by the restricted
 *  terms and conditions set forth in the SEQUANS
 *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE
 *  AGREEMENT. The present source code and all its derived
 *  forms can ONLY and EXCLUSIVELY be used with SEQUANS
 *  Communications' products. The distribution/sale of the
 *  present source code and all its derived forms is EXCLUSIVELY
 *  RESERVED to regular LICENCE holder and otherwise STRICTLY
 *  PROHIBITED.
 *
 *****************************************************************
 */

#pragma once

// SIDL keywords.
#include "msg.sidl"

// SIDL commons.
#include "SidlCommon.sidl"

typedef Null_Type BcchToPbchConfig_Type;
typedef ASN_ENUM(ASN_NAME(SystemInformationBlockType1, si_WindowLength)) SiWindowLength_Type;
typedef SIDL_DYNAMIC_OF_STRUCT(ASN_NAME(BCCH_DL_SCH_Message), SI_List_Type);
typedef SIDL_DYNAMIC(SI_List_Type, SegmentedSI_List_Type);

struct Sib1Schedul_Type {
	SIDL_OPTIONAL_OF_STRUCT_WITH_PFX(Sib1Schedul_Type, DciDlInfoCommon_Type, DciInfo);
};

struct SingleSiSchedul_Type {
	SIDL_OPTIONAL_OF_STRUCT_WITH_PFX(SingleSiSchedul_Type, DciDlInfoCommon_Type, DciInfo);
	SIDL_OPTIONAL(int32_t, SubframeOffset);
};

struct SiSchedul_Type {
	SIDL_OPTIONAL(ASN_ENUM(ASN_NAME(SI_Periodicity_r12)), Periodicity);
	SIDL_DYNAMIC_OPTIONAL_OF_STRUCT(SingleSiSchedul_Type, Window);
};

typedef SIDL_DYNAMIC_OF_STRUCT(SiSchedul_Type, SiSchedulList_Type);

struct AllSiSchedul_Type {
	SIDL_OPTIONAL(SiWindowLength_Type, WindowLength);
	SIDL_OPTIONAL(SiSchedulList_Type, SiList);
	SIDL_OPTIONAL(SiSchedulList_Type, SegmentedSiList);
};

struct BcchToPdschConfig_Type {
	SIDL_OPTIONAL_OF_STRUCT(Sib1Schedul_Type, Sib1Schedul);
	SIDL_OPTIONAL_OF_STRUCT(AllSiSchedul_Type, SiSchedul);
};

struct BcchInfo_Type {
	SIDL_OPTIONAL_OF_STRUCT_WITH_PFX(BcchInfo_Type, ASN_NAME(BCCH_BCH_Message), MIB);
	SIDL_OPTIONAL_OF_STRUCT_WITH_PFX(BcchInfo_Type, ASN_NAME(BCCH_DL_SCH_Message), SIB1);
	SIDL_OPTIONAL(SI_List_Type, SIs);
	SIDL_OPTIONAL(SegmentedSI_List_Type, SegmentedSIs);
};

struct BcchConfig_Type {
	SIDL_OPTIONAL(BcchToPbchConfig_Type, Pbch);
	SIDL_OPTIONAL_OF_STRUCT(BcchToPdschConfig_Type, Pdsch);
	SIDL_OPTIONAL_OF_STRUCT(BcchInfo_Type, BcchInfo);
	SIDL_OPTIONAL_WITH_PFX(BcchConfig_Type, Null_Type, StopSib1Transmission);
};
